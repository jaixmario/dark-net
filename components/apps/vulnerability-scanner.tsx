"use client"

import { useState } from "react"
import { Shield, AlertTriangle, RefreshCw, Server, Lock, FileText } from "lucide-react"

type Vulnerability = {
  id: string
  name: string
  severity: "critical" | "high" | "medium" | "low"
  description: string
  affected: string
  recommendation: string
}

type ScanTarget = {
  id: string
  name: string
  type: "server" | "website" | "network" | "application"
  address: string
}

export function VulnerabilityScanner() {
  const [targetInput, setTargetInput] = useState("")
  const [scanType, setScanType] = useState<"quick" | "full">("quick")
  const [isScanning, setIsScanning] = useState(false)
  const [progress, setProgress] = useState(0)
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([])
  const [selectedVulnerability, setSelectedVulnerability] = useState<any | null>(null)
  const [scanTargets, setScanTargets] = useState<ScanTarget[]>([
    { id: "target-1", name: "Web Server", type: "server", address: "192.168.1.10" },
    { id: "target-2", name: "Corporate Website", type: "website", address: "https://example.com" },
    { id: "target-3", name: "Internal Network", type: "network", address: "10.0.0.0/24" },
  ])
  const [selectedTarget, setSelectedTarget] = useState<ScanTarget | null>(null)

  const startScan = () => {
    if (!selectedTarget && !targetInput) return

    setIsScanning(true)
    setProgress(0)
    setVulnerabilities([])
    setSelectedVulnerability(null)

    // If we have a new target, add it to the list
    if (targetInput && !selectedTarget) {
      const newTarget: ScanTarget = {
        id: `target-${Date.now()}`,
        name: targetInput.includes("://") ? new URL(targetInput).hostname : targetInput,
        type: targetInput.startsWith("http") ? "website" : targetInput.includes("/") ? "network" : "server",
        address: targetInput,
      }

      setScanTargets((prev) => [...prev, newTarget])
      setSelectedTarget(newTarget)
      setTargetInput("")
    }

    // Simulate scanning progress
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setIsScanning(false)
          generateFakeVulnerabilities()
          return 100
        }
        return prev + (scanType === "quick" ? 5 : 2)
      })
    }, 200)
  }

  const generateFakeVulnerabilities = () => {
    const vulnCount = scanType === "quick" ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 10) + 3

    const vulnTypes = [
      {
        name: "SQL Injection",
        description: "SQL injection vulnerability allows attackers to execute arbitrary SQL commands on the database.",
        recommendation: "Use parameterized queries or prepared statements. Implement input validation.",
      },
      {
        name: "Cross-Site Scripting (XSS)",
        description:
          "XSS vulnerability allows attackers to inject client-side scripts into web pages viewed by other users.",
        recommendation: "Implement proper output encoding. Use Content-Security-Policy headers.",
      },
      {
        name: "Outdated Software",
        description: "Running outdated software with known security vulnerabilities.",
        recommendation: "Update to the latest version. Enable automatic updates if available.",
      },
      {
        name: "Weak Password Policy",
        description: "Password policy does not enforce sufficient complexity requirements.",
        recommendation: "Implement stronger password requirements. Use multi-factor authentication.",
      },
      {
        name: "Insecure Direct Object References",
        description: "Application exposes references to internal implementation objects.",
        recommendation: "Implement proper access controls. Use indirect reference maps.",
      },
      {
        name: "Missing Encryption",
        description: "Sensitive data is transmitted or stored without proper encryption.",
        recommendation: "Implement TLS for data in transit. Use strong encryption for data at rest.",
      },
      {
        name: "Open Ports",
        description: "Unnecessary ports are open and accessible.",
        recommendation: "Close unused ports. Implement proper firewall rules.",
      },
      {
        name: "Default Credentials",
        description: "System is using default or easily guessable credentials.",
        recommendation: "Change all default passwords. Implement account lockout policies.",
      },
    ]

    const severities: ("critical" | "high" | "medium" | "low")[] = ["critical", "high", "medium", "low"]

    const newVulnerabilities: Vulnerability[] = []

    for (let i = 0; i < vulnCount; i++) {
      const vulnType = vulnTypes[Math.floor(Math.random() * vulnTypes.length)]
      const severity = severities[Math.floor(Math.random() * severities.length)]

      newVulnerabilities.push({
        id: `vuln-${Date.now()}-${i}`,
        name: vulnType.name,
        severity,
        description: vulnType.description,
        affected: selectedTarget?.address || targetInput,
        recommendation: vulnType.recommendation,
      })
    }

    setVulnerabilities(newVulnerabilities)
  }

  const generateVulnerabilities = (target: string) => {
    const vulnCount = Math.floor(Math.random() * 8) + 3
    const vulnerabilities = []

    // Real CVE IDs and vulnerability types
    const realVulnerabilities = [
      {
        id: "CVE-2023-38831",
        name: "WinRAR ACE Format Handling RCE",
        severity: "Critical",
        description: "WinRAR before 6.23 allows attackers to execute arbitrary code via a crafted ACE archive.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-4863",
        name: "WebP Heap Buffer Overflow",
        severity: "Critical",
        description:
          "Heap buffer overflow in WebP in Google Chrome prior to 116.0.5845.187 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.",
        cvss: 8.8,
      },
      {
        id: "CVE-2023-36884",
        name: "Microsoft Office Code Execution",
        severity: "Critical",
        description: "Microsoft Office Word Remote Code Execution Vulnerability.",
        cvss: 9.6,
      },
      {
        id: "CVE-2023-29360",
        name: "Citrix ShareFile RCE",
        severity: "Critical",
        description:
          "A vulnerability in Citrix ShareFile Storage Zones Controller could allow an unauthenticated attacker to remotely execute arbitrary code on the Storage Zones Controller.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-3519",
        name: "Citrix ADC and Gateway RCE",
        severity: "Critical",
        description:
          "A vulnerability in Citrix ADC and Citrix Gateway could allow an unauthenticated attacker to execute arbitrary code on the appliance.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-20198",
        name: "Cisco IOS XE Web UI RCE",
        severity: "Critical",
        description:
          "A vulnerability in the web UI feature of Cisco IOS XE Software could allow an unauthenticated, remote attacker to execute arbitrary code with root privileges on the underlying operating system.",
        cvss: 10.0,
      },
      {
        id: "CVE-2023-35078",
        name: "PaperCut NG/MF RCE",
        severity: "Critical",
        description: "PaperCut NG/MF is vulnerable to unauthenticated remote code execution.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-34362",
        name: "MOVEit Transfer SQL Injection",
        severity: "Critical",
        description:
          "SQL injection vulnerability in MOVEit Transfer could allow an unauthenticated attacker to gain unauthorized access to the MOVEit Transfer database.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-27350",
        name: "PaperCut NG/MF RCE",
        severity: "Critical",
        description: "A critical vulnerability in PaperCut NG/MF allows unauthenticated remote code execution.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-27524",
        name: "Apache Superset Auth Bypass",
        severity: "High",
        description: "Apache Superset authentication bypass vulnerability.",
        cvss: 8.2,
      },
      {
        id: "CVE-2023-23397",
        name: "Microsoft Outlook Elevation of Privilege",
        severity: "High",
        description: "Microsoft Outlook Elevation of Privilege Vulnerability.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-21716",
        name: "Microsoft Word RTF Parsing RCE",
        severity: "High",
        description: "Microsoft Word RTF Parsing Remote Code Execution Vulnerability.",
        cvss: 9.8,
      },
      {
        id: "CVE-2023-24880",
        name: "Windows SmartScreen Security Feature Bypass",
        severity: "Medium",
        description: "Windows SmartScreen Security Feature Bypass Vulnerability.",
        cvss: 5.4,
      },
      {
        id: "CVE-2023-28252",
        name: "Windows Common Log File System Driver Elevation of Privilege",
        severity: "High",
        description: "Windows Common Log File System Driver Elevation of Privilege Vulnerability.",
        cvss: 7.8,
      },
      {
        id: "CVE-2023-28204",
        name: "Windows Ancillary Function Driver for WinSock Elevation of Privilege",
        severity: "Medium",
        description: "Windows Ancillary Function Driver for WinSock Elevation of Privilege Vulnerability.",
        cvss: 7.8,
      },
    ]

    // Select random vulnerabilities from the real list
    for (let i = 0; i < vulnCount; i++) {
      const randomVuln = realVulnerabilities[Math.floor(Math.random() * realVulnerabilities.length)]

      // Add some randomization to make it look more realistic
      const detectionDate = new Date()
      detectionDate.setDate(detectionDate.getDate() - Math.floor(Math.random() * 30))

      vulnerabilities.push({
        id: randomVuln.id,
        name: randomVuln.name,
        severity: randomVuln.severity,
        description: randomVuln.description,
        cvss: randomVuln.cvss,
        detectedOn: detectionDate.toISOString().split("T")[0],
        status: Math.random() > 0.3 ? "Unpatched" : "Patched",
        affectedComponent: `${target} - ${["Web Server", "Database", "API", "Frontend", "Backend", "Authentication System"][Math.floor(Math.random() * 6)]}`,
      })
    }

    return vulnerabilities
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-red-500"
      case "high":
        return "text-orange-500"
      case "medium":
        return "text-yellow-500"
      case "low":
        return "text-blue-500"
      default:
        return "text-gray-500"
    }
  }

  const getTargetIcon = (type: string) => {
    switch (type) {
      case "server":
        return <Server className="h-5 w-5" />
      case "website":
        return <Globe className="h-5 w-5" />
      case "network":
        return <Wifi className="h-5 w-5" />
      case "application":
        return <FileText className="h-5 w-5" />
      default:
        return <Shield className="h-5 w-5" />
    }
  }

  return (
    <div className="h-full flex flex-col bg-black p-3 text-green-500">
      <div className="mb-4">
        <div className="flex flex-wrap items-end gap-2 mb-3">
          <div className="flex-1">
            <label className="block text-xs mb-1">Target:</label>
            <div className="flex">
              <input
                type="text"
                value={targetInput}
                onChange={(e) => {
                  setTargetInput(e.target.value)
                  setSelectedTarget(null)
                }}
                placeholder="IP, URL, or hostname (e.g., 192.168.1.1, example.com)"
                className="flex-1 bg-gray-900 border border-green-500/50 p-2 text-sm"
                disabled={isScanning}
              />
              <select
                value={selectedTarget ? selectedTarget.id : ""}
                onChange={(e) => {
                  const target = scanTargets.find((t) => t.id === e.target.value)
                  setSelectedTarget(target || null)
                  setTargetInput("")
                }}
                className="bg-gray-900 border border-green-500/50 border-l-0 p-2 text-sm"
                disabled={isScanning}
              >
                <option value="">Select target...</option>
                {scanTargets.map((target) => (
                  <option key={target.id} value={target.id}>
                    {target.name} ({target.address})
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="block text-xs mb-1">Scan Type:</label>
            <select
              value={scanType}
              onChange={(e) => setScanType(e.target.value as "quick" | "full")}
              className="bg-gray-900 border border-green-500/50 p-2 text-sm"
              disabled={isScanning}
            >
              <option value="quick">Quick Scan</option>
              <option value="full">Full Scan</option>
            </select>
          </div>

          <button
            onClick={startScan}
            disabled={isScanning || (!targetInput && !selectedTarget)}
            className="bg-green-900/50 border border-green-500 px-4 py-2 text-sm hover:bg-green-900/70 disabled:opacity-50 flex items-center"
          >
            {isScanning ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                Scanning...
              </>
            ) : (
              <>
                <Shield className="h-4 w-4 mr-2" />
                Start Scan
              </>
            )}
          </button>
        </div>

        {isScanning && (
          <div className="mb-3">
            <div className="flex justify-between text-xs mb-1">
              <span>Scanning for vulnerabilities...</span>
              <span>{progress}%</span>
            </div>
            <div className="w-full bg-gray-900 h-2">
              <div className="bg-green-500 h-full transition-all duration-200" style={{ width: `${progress}%` }}></div>
            </div>
          </div>
        )}
      </div>

      <div className="flex-1 flex flex-col md:flex-row gap-3 overflow-hidden">
        {/* Vulnerabilities List */}
        <div className="w-full md:w-1/2 border border-green-500/30 overflow-auto">
          <div className="sticky top-0 bg-gray-900 p-2 border-b border-green-500/30 text-sm font-bold flex items-center">
            <AlertTriangle className="h-4 w-4 mr-2" />
            <span>Detected Vulnerabilities</span>
          </div>

          <div className="divide-y divide-green-500/20">
            {vulnerabilities.length === 0 ? (
              <div className="p-4 text-center text-sm text-green-500/70">
                {isScanning ? "Scanning in progress..." : "No vulnerabilities detected. Start a scan."}
              </div>
            ) : (
              vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className={`p-3 text-sm cursor-pointer hover:bg-green-900/20 ${selectedVulnerability?.id === vuln.id ? "bg-green-900/30" : ""}`}
                  onClick={() => setSelectedVulnerability(vuln)}
                >
                  <div className="flex items-center mb-1">
                    <div className={`w-2 h-2 rounded-full mr-2 ${getSeverityColor(vuln.severity)}`}></div>
                    <span className="font-bold">{vuln.name}</span>
                    <span className={`ml-auto text-xs uppercase ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity}
                    </span>
                  </div>
                  <p className="text-xs text-green-500/70 truncate">{vuln.description}</p>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Vulnerability Details */}
        <div className="w-full md:w-1/2 border border-green-500/30 overflow-auto">
          {selectedVulnerability ? (
            <div className="p-3">
              <div className="flex items-center mb-4">
                <div className={`w-3 h-3 rounded-full mr-2 ${getSeverityColor(selectedVulnerability.severity)}`}></div>
                <h3 className="text-lg">{selectedVulnerability.name}</h3>
                <span
                  className={`ml-auto px-2 py-1 text-xs rounded border ${getSeverityColor(selectedVulnerability.severity)} border-current`}
                >
                  {selectedVulnerability.severity.toUpperCase()}
                </span>
              </div>

              <div className="space-y-4">
                <div>
                  <div className="text-sm font-bold mb-1">Description:</div>
                  <p className="text-sm">{selectedVulnerability.description}</p>
                </div>

                <div>
                  <div className="text-sm font-bold mb-1">Affected Target:</div>
                  <p className="text-sm">{selectedVulnerability.affected}</p>
                </div>

                <div>
                  <div className="text-sm font-bold mb-1">Recommendation:</div>
                  <p className="text-sm">{selectedVulnerability.recommendation}</p>
                </div>

                <div className="p-3 border border-green-500/30 bg-green-900/10">
                  <div className="flex items-center mb-2">
                    <Lock className="h-4 w-4 mr-2" />
                    <span className="text-sm font-bold">Security Impact</span>
                  </div>
                  <ul className="list-disc list-inside text-xs space-y-1">
                    <li>May allow unauthorized access to sensitive data</li>
                    <li>Could lead to system compromise</li>
                    <li>Potential for data exfiltration</li>
                    <li>Risk of service disruption</li>
                  </ul>
                </div>
              </div>
            </div>
          ) : (
            <div className="p-4 text-center text-sm text-green-500/70 h-full flex items-center justify-center">
              <div className="flex flex-col items-center">
                <Shield className="h-8 w-8 mb-3" />
                <span>Select a vulnerability to view details</span>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// Missing component imports
function Globe(props: any) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <circle cx="12" cy="12" r="10" />
      <line x1="2" x2="22" y1="12" y2="12" />
      <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" />
    </svg>
  )
}

function Wifi(props: any) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M5 12.55a11 11 0 0 1 14.08 0" />
      <path d="M1.42 9a16 16 0 0 1 21.16 0" />
      <path d="M8.53 16.11a6 6 0 0 1 6.95 0" />
      <line x1="12" y1="20" x2="12.01" y2="20" />
    </svg>
  )
}
